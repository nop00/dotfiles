set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=$USERPROFILE/vimfiles/bundle/Vundle.vim
call vundle#begin('$USERPROFILE/vimfiles/bundle/')

" let Vundle manage Vundle
" required! 
Plugin 'VundleVim/Vundle.vim'

"search in files/tags/MRU
Plugin 'ctrlpvim/ctrlp.vim'
"buffer explorer
Plugin 'techlivezheng/vim-plugin-minibufexpl'

" commenting/uncommenting easily
Plugin 'scrooloose/nerdcommenter'
" file explorer
Plugin 'scrooloose/nerdtree'
" fancy status bar
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" surround stuff with quotes, brackets, etc
Plugin 'surround.vim'
" syntax checker
Plugin 'scrooloose/syntastic'

" ctags stuff
" Updates entries in a tags file automatically when saving
Plugin 'AutoTag'
" display tags for the current file in a sidebar
Plugin 'Tagbar'

" CSS
" commented out because very slow on html files
"Plugin 'ap/vim-css-color'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'groenewege/vim-less'

" Javascript
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'jason0x43/vim-js-indent'

" color scheme
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'https://github.com/morhetz/gruvbox'

" so vim can lauch stuff asynchronously
Plugin 'tpope/vim-dispatch'

" Enhance % matching
Plugin 'matchit.zip'

" Emmet
Plugin 'mattn/emmet-vim'

" UltiSnips
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" delimitMate
"Plugin 'Raimondi/delimitMate'

"auto pairs
Plugin 'jiangmiao/auto-pairs'

" ruby stuff
"Plugin 'vim-ruby/vim-ruby'
"Plugin 'tpope/vim-endwise'

" wrapper for file searches, gets us a nice results formatting
Plugin 'mileszs/ack.vim'

" twig syntax highlighting
Plugin 'lumiliet/vim-twig'

" Riot's tag files highlighting
Plugin 'ryym/vim-riot'

" Typescript syntax highlighting
Plugin 'leafgarland/typescript-vim'

" Typescript completion, used by syntastic to check .ts syntax
Plugin 'Quramy/tsuquyomi'
" required by tsuquyomi
Plugin 'Shougo/vimproc.vim'

" Code completion
Plugin 'valloric/YouCompleteMe'

" Git handling
Plugin 'tpope/vim-fugitive'

call vundle#end()

" Afficher les numéros de ligne
:set nu
set background=dark
" colorscheme Tomorrow-Night-Eighties
colorscheme gruvbox
" Activer la recherche incrémentale
:set incsearch
" La recherche ne tient pas compte de la casse
:set ignorecase
" La recherche ne tient pas compte de la casse sauf s'il y a une (ou
" plusieurs) majuscules
:set smartcase
" Activer la coloration syntaxique
:syntax on
" Transformer les TABs en espaces
:set expandtab
" Un TAB = 4 espaces
:set tabstop=4
" Décale de 4 espaces quand on utilise << ou >>
:set shiftwidth=4
" Activer la reconnaissance du type de fichier
:filetype on
" Utliser les plugins spécifiques à chaque type de fichier
:filetype plugin on
" Utliser l'indentation spécifique à chaque type de fichier
:filetype plugin indent on
" Activer l'indentation automatique
:set autoindent
" Mettre en surbrillance les résultats de recherche
:set hlsearch
" Faire en sorte que backspace efface le caractère précédent
:set bs=2

:set cursorline
:set cursorcolumn

" Afficher la statusline
:set laststatus=2

" Enable indent folding
:set foldenable
:set foldmethod=syntax

" Set space to toggle a fold
:nnoremap <space> za
:nnoremap <S-space> zR

" Cacher le menu et la barre d'outils
:set guioptions-=T
:set guioptions-=m
:set guioptions-=r
:set guioptions-=R
:set guioptions-=l
:set guioptions-=L

" Folding pour php
:let php_folding = 1

" Folding pour xml
let g:xml_syntax_folding=1

" Tous les folds sont dépliés par défaut
:set foldlevel=42

set ofu=syntaxcomplete#Complete

set encoding=utf8

set spelllang=fr

:au BufEnter *.proj :set filetype=xml

set nospell


" asm stuff
":au BufRead *.asm :copen
":au BufRead *.asm :wincmd p
:au BufRead *.asm :set filetype=asm68k
:au BufRead *.asm :set makeprg=pceas\ demo.asm
:au BufRead *.asm :nmap <F4> :w<CR>:make<CR>
:au BufRead *.asm :nmap <F5> :!mednafen demo.pce<CR>

:nmap <A-t> :TagbarToggle<CR>
:nmap <A-l> :NERDTreeToggle<CR>
:nmap <F11> :!start ctags -R .<CR>
:nmap <F12> <C-]>

" switch between .h and .cpp file
map <leader>gh :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" exit if the quickfix window is the last
au BufEnter * call MyLastWindow()
function! MyLastWindow()
  " if the window is quickfix go on
  if &buftype=="quickfix"
    " if this window is last on screen quit without warning
    if winbufnr(2) == -1
      quit!
    endif
  endif
endfunction

:nmap <leader>a mZggyG'Z

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


" copy current file path + name to clipboard
:nmap <leader>gy :let @* = expand("%:p")<CR>

set wildignore+=*.o,*.obj,*.exe,*.dll,packages/**,obj/**,*.vs*,*.log

:nmap <leader>f :MBEFocus<CR>

:command! Max :set lines=999 columns=999

:nmap j gj
:nmap k gk

":nmap t gj
":nmap n gk
":nmap s l

:nmap <leader>h :set hls!<CR>

let g:matchparen_insert_timeout=5

:nnoremap n nzz

" so the undo history & co are kept when switching buffers
:set hidden

"
" PLUGINS CONFIG
"

" airline
let g:airline_theme = 'powerlineish'
let g:airline_powerline_fonts = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" ctrlp
let g:ctrlp_custom_ignore = '\v[\/](node_modules|bower_components|dist|bin|obj)|(\.(swp|git|hg))$'

" syntastic
let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_javascript_checkers=['jshint']
let g:syntastic_check_on_open=1 "check files on open, not just save
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi', 'tslint'] " You shouldn't use 'tsc' checker.

" jedi
"autocmd FileType python setlocal completeopt-=preview"

" YouCompleteMe
let g:ycm_complete_in_comments = 1
"let g:ycm_collect_identifiers_from_tags_files = 0
"let g:ycm_server_keep_logfiles = 1
"let g:ycm_server_log_level = 'debug'

" Launch the Typescript compiler without any options instead
" of typescript-vim's default 'tsc $* %' so it uses tsconfig.json
autocmd FileType typescript :set makeprg=tsc

" MiniBufExpl
:command! BD :MBEbd

" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" completion
" hide preview window after use
" (from http://stackoverflow.com/questions/3105307/how-do-you-automatically-remove-the-preview-window-after-autocompletion-in-vim)
autocmd CursorMovedI * if pumvisible() == 0 && bufname("%") != "[Command Line]"|pclose|endif
autocmd InsertLeave * if pumvisible() == 0 && bufname("%") != "[Command Line]"|pclose|endif

" css
:au BufEnter *.css :set omnifunc=csscomplete#CompleteCSS

"ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" NERDTree
:nmap <leader>e :NERDTreeToggle<cr>

" Ack
let g:ackprg = 'rg --vimgrep --no-heading'
" perform search in the background
let g:ack_use_dispatch = 1
" auto-close wuickfix window when going to a file from the list
let g:ack_autoclose = 1
nnoremap <Leader>a :Ack!<Space>
nnoremap <Leader>as :copen<cr>
nnoremap <Leader>ah :cclose<cr>

" Projects shortcuts
:command! Belote :cd ~/projects/belote-net
:command! BeloteOld :cd ~/projects/beloteNet
:command! GrandsLoups :cd ~/projects/les-grands-loups

